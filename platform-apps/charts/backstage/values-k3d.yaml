cert:
  enabled: false

backstage:
  ingress:
    enabled: true
    host: backstage-127-0-0-1.nip.io
    tls:
      enabled: true
      secretName: backstage-server-tls

  backstage:
    image:
      registry: ghcr.io/suxess-it
      repository: sx-backstage
      tag: latest
    extraEnvVarsSecrets:
      - sx-cnp-secret
      - manual-secret
    appConfig:
      app:
        title: sX CNP App
        baseUrl: https://backstage-127-0-0-1.nip.io

      organization:
        name: sX CNP

      backend:
        # Used for enabling authentication, secret is shared by all backend plugins
        # See https://backstage.io/docs/tutorials/backend-to-backend-auth for
        # information on the format
        # auth:
        #   keys:
        #     - secret: ${BACKEND_SECRET}
        baseUrl: https://backstage-127-0-0-1.nip.io
        listen:
          port: 7007
          # Uncomment the following host directive to bind to specific interfaces
          # host: 127.0.0.1
        csp:
          connect-src: ["'self'", 'http:', 'https:']
          frame-src: ['*.nip.io']
          # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
          # Default Helmet Content-Security-Policy values can be removed by setting the key to false
        cors:
          origin: https://backstage-127-0-0-1.nip.io
          methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
          credentials: true
        # This is for local development only, it is not recommended to use this in production
        # The production database configuration is stored in app-config.production.yaml
        database:
          client: better-sqlite3
          connection: ':memory:'
        cache:
          store: memory
        # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

      integrations:
        github:
          - host: github.com
            # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
            # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
            token: ${GITHUB_TOKEN}
          ### Example for how to add your GitHub Enterprise instance using the API:
          # - host: ghe.example.net
          #   apiBaseUrl: https://ghe.example.net/api/v3
          #   token: ${GHE_TOKEN}

      proxy:
        ### Example for how to add a proxy endpoint for the frontend.
        ### A typical reason to do this is to handle HTTPS and CORS for internal services.
        # '/test':
        #   target: 'https://example.com'
        #   changeOrigin: true
        "/argocd/api":
          # use k8s internal service name because argocd-127-0-0-1.nip.io resolves to 127.0.0.1 in container, too
          target: http://argocd-server.argocd:80/api/v1/
          changeOrigin: true
          secure: false
          headers:
            Cookie:
              $env: ARGOCD_AUTH_TOKEN

        '/grafana/api':
          # use k8s internal service name because grafana-127-0-0-1.nip.io resolves to 127.0.0.1 in container, too
          target: http://sx-kube-prometheus-stack-grafana.monitoring:80
          headers:
            Authorization: Bearer ${GRAFANA_TOKEN}

      argocd:
        baseUrl: https://argocd-127-0-0-1.nip.io/
        username: admin
        password: admin
        appLocatorMethods:
          - type: 'config'
            instances:
              - name: main
                url: https://argocd-127-0-0-1.nip.io/

      # Reference documentation http://backstage.io/docs/features/techdocs/configuration
      # Note: After experimenting with basic setup, use CI/CD to generate docs
      # and an external cloud storage when deploying TechDocs for production use-case.
      # https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
      techdocs:
        builder: 'local' # Alternatives - 'external'
        generator:
          runIn: 'local' # Alternatives - 'local'
        publisher:
          type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

      auth:
        environment: development
        providers:
          github:
            development:
              clientId: ${GITHUB_CLIENTID}
              clientSecret: ${GITHUB_CLIENTSECRET}

      scaffolder:
        # see https://backstage.io/docs/features/software-templates/configuration for software template options

      catalog:
        import:
          entityFilename: catalog-info.yaml
          pullRequestBranchName: backstage-integration
        rules:
          - allow: [Component, System, API, Resource, Location, Template, Domain, User, Group ]
        locations:
          - type: url
            target: https://github.com/suxess-it/sx-cnp-oss-demo-app/blob/main/catalog-info.yaml
          - type: url
            target: https://github.com/phac008/software-templates/blob/main/showcase-templates.yaml
            rules:
              - allow: [Template]

      kubernetes:
        serviceLocatorMethod:
          type: multiTenant
        clusterLocatorMethods:
          - type: config
            clusters:
              - url: https://kubernetes.default.svc
                name: k3d-local
                authProvider: serviceAccount
                skipTLSVerify: true
                skipMetricsLookup: true
                serviceAccountToken: ${K8S_SA_TOKEN}

      scorecards:
        jsonDataUrl: https://raw.githubusercontent.com/Oriflame/backstage-plugins/main/plugins/score-card/sample-data/

      
      grafana:
        # Publicly accessible domain
        domain: https://grafana-127-0-0-1.nip.io

        # Is unified alerting enabled in Grafana?
        # See: https://grafana.com/blog/2021/06/14/the-new-unified-alerting-system-for-grafana-everything-you-need-to-know/
        # Optional. Default: false
        unifiedAlerting: false
